#!/bin/sh
#
# SPDX-License-Identifier: GPL-3.0-only OR Apache-2.0 OR MIT
# SPDX-FileCopyrightText: 2024 Charles Wong <charlie-wong@outlook.com>
# Created By: Charles Wong 2024-04-30T09:39:38+08:00 Asia/Shanghai
# Repository: https://github.com/xwlc/zeta
# Copy to /etc/grub.d/01-grub-theme
set -e

grub_errs() { echo "ERRS: $@" >&2; }
grub_info() { echo "INFO: $@" >&2; }

# => ${pkgdatadir}/grub-mkconfig_lib
# The helper library for grub-mkconfig
if [ -f /usr/lib/grub/grub-mkconfig_lib ]; then
  .  /usr/lib/grub/grub-mkconfig_lib
elif [ -f /usr/share/grub/grub-mkconfig_lib ]; then
  .  /usr/share/grub/grub-mkconfig_lib
else
  # no grub file, so we notify and exit gracefully
  grub_errs "Can not find grub-mkconfig helper library file, exiting."
  exit 0
fi

# We want to work in /boot/grub/ only.
test -d /boot/grub
cd /boot/grub

# Set the location of a possibly necessary cache file for the background image.
# NOTE: This MUST BE A DOTFILE to avoid confusing it with user-defined images.
BACKGROUND_CACHE=".background_cache"

set_default_theme() {
  local indent_spaces="$1"
  case ${GRUB_DISTRIBUTOR} in
    *Arch* | *Debian* | *Ubuntu*)
      # Set a monochromatic theme for Tanglu/Ubuntu.
      echo "${indent_spaces}set menu_color_normal=white/black"
      echo "${indent_spaces}set menu_color_highlight=black/light-gray"
      ;;
    *)
      # Set the traditional Debian blue theme.
      echo "${indent_spaces}set menu_color_normal=cyan/blue"
      echo "${indent_spaces}set menu_color_highlight=white/blue"
      ;;
  esac
}

module_available() {
  local module
  for module in "${1}.mod" */"${1}.mod"; do
    if [ -f "${module}" ]; then
      return 0
    fi
  done
  return 1
}

# $1    path to picture, like "/path/to/x.png"
# $2    color    normal, like "black/black"
# $3    color highlight, like "magenta/black"
set_background_image() {
  # Step-1: Search all available output modes ...
  local output
  for output in ${GRUB_TERMINAL_OUTPUT}; do
    if [ "x${output}" = "xgfxterm" ]; then
      break
    fi
  done

  # ... and check if we are able to display a background image at all.
  if ! [ "x${output}" = "xgfxterm" ]; then
    return 1
  fi

  # Step-2: Check if the specified background image exists.
  if ! [ -f "${1}" ]; then
    return 2
  fi

  # Step-3: Search the correct GRUB module for our background image.
  local reader
  case "${1}" in
    *.jpg | *.JPG | *.jpeg | *.JPEG) reader="jpeg" ;;
    *.png | *.PNG) reader="png" ;;
    *.tga | *.TGA) reader="tga" ;;
    *) return 3 ;;
  esac

  # Step-4: Check if the necessary GRUB module is available.
  if ! module_available "${reader}"; then
    return 4
  fi

  # Step-5: Check if GRUB can read the background image directly.
  # If so, we can remove the cache file (if any). Otherwise the
  # background image needs to be cached under /boot/grub/.
  if is_path_readable_by_grub "${1}"; then
    rm --force "${BACKGROUND_CACHE}.jpeg" \
               "${BACKGROUND_CACHE}.png" \
               "${BACKGROUND_CACHE}.tga"
  elif cp "${1}" "${BACKGROUND_CACHE}.${reader}"; then
    set -- "${BACKGROUND_CACHE}.${reader}" "${2}" "${3}"
  else
    return 5
  fi

  # Step-6: Prepare GRUB to read the background image.
  if ! prepare_grub_to_access_device "$(${grub_probe} --target=device "${1}")"; then
    return 6
  fi

  # Step-7: Everything went fine, print out a message to stderr ...
  grub_info "Found background image: ${1}"

  # ... and write our configuration snippet to stdout. Use the colors
  # desktop-base specified. If we're using a user-defined background, use
  # the default colors since we've got no idea how the image looks like.
  # If loading the background image fails, use the default theme.
  echo "insmod ${reader}"
  echo "if background_image $(make_system_path_relative_to_its_root "${1}"); then"
  if [ -n "${2}" ]; then
    echo "  set color_normal=${2}"
  fi
  if [ -n "${3}" ]; then
    echo "  set color_highlight=${3}"
  fi
  if [ -z "${2}" ] && [ -z "${3}" ]; then
    echo "  true"
  fi
  echo "else"
  set_default_theme "  "
  echo "fi"
}

if false; then
# Remove obsolete /boot/grub/* images, which are copied by earlier version grub.
while read checksum background; do
  if [ -f "${background}" ] && [ "x$(sha1sum "${background}")" = "x${checksum}  ${background}" ]; then
    grub_info "Remove old background image: ${background}"
    rm "${background}"
  fi
done << EOF
648ee65dd0c157a69b019a5372cbcfea4fc754a5  debian-wallpaper-640x480.png
11143e8c92a073401de0b0fd42d0c052af4ccd9b  moreblue-wallpaper-64x64.png
EOF
fi

# First check whether user has specified a background image explicitly.
if [ -n "${GRUB_BACKGROUND+x}" ]; then
  set_background_image "${GRUB_BACKGROUND}" || set_default_theme
  exit 0
fi

# Next try to use the background image and colors specified by the user.
if set_background_image "${GRUB_WALLPAPER}" "${GRUB_COLOR_NORMAL}" "${GRUB_COLOR_HIGHLIGHT}"; then
  exit 0
fi

# Next search for pictures the user put into /boot/grub/ and use the first one.
for background in *.jpg *.JPG *.jpeg *.JPEG *.png *.PNG *.tga *.TGA; do
  if set_background_image "${background}"; then
    exit 0
  fi
done

# Finally, if all of the above fails, use the default theme.
set_default_theme
