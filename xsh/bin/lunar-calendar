#!/usr/bin/env node
// SPDX-License-Identifier: GPL-3.0-only OR Apache-2.0 OR MIT
// SPDX-FileCopyrightText: 2024 Charles Wong <charlie-wong@outlook.com>
// Created By: Charles Wong 2024-05-27T14:31:25+08:00 Asia/Shanghai
// Repository: https://github.com/xwlc/zeta

// 干支纪标记法以 60 为循环周期
const Gan=[
  "甲", "乙", "丙", "丁", "戊", "己", "庚", "辛", "壬", "癸"
];
const Zhi=[
  "子", "丑", "寅", "卯", "辰", "巳", "午", "未", "申", "酉", "戌", "亥"
];
const Animals=[
//"鼠", "牛", "虎", "兔", "龍", "蛇", "馬", "羊", "猴", "雞", "狗", "豬"
  "鼠", "牛", "虎", "兔", "龙", "蛇", "马", "羊", "猴", "鸡", "狗", "猪"
];
const JieQi = [ // 数组索引编号从 0 开始, 小寒数字编号 01
  "小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨",
  "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑",
  "白露", "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至"
];

const MIN_YEAR = 1900, MAX_YEAR = 2100;
const LunarLeapInfo = [ // 农历 1900 ~ 2100 的润年速查表
  0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, // 1900-1909
  0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, // 1910-1919
  0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, // 1920-1929
  0x06566, 0x0d4a0, 0x0ea50, 0x16a95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, // 1930-1939
  0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, // 1940-1949
  0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, // 1950-1959
  0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, // 1960-1969
  0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, // 1970-1979
  0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, // 1980-1989
  0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x05ac0, 0x0ab60, 0x096d5, 0x092e0, // 1990-1999
  0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, // 2000-2009
  0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, // 2010-2019
  0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, // 2020-2029
  0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, // 2030-2039
  0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, // 2040-2049
  0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, // 2050-2059
  0x092e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, // 2060-2069
  0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, // 2070-2079
  0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, // 2080-2089
  0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, // 2090-2099
  0x0d520 // 2100
];

const SolarJieQi = [ // 公历 1900 ~ 2100 的二十四节气速查表
  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f',
  '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',
  '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa',
  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f',
  'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f',
  '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa',
  '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2',
  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f',
  '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e',
  '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722',
  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f',
  '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',
  '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722',
  '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f',
  '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',
  '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',
  '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722',
  '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',
  '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',
  '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722',
  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e',
  '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',
  '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722',
  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e',
  '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2',
  '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',
  '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',
  '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',
  '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',
  '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721',
  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa',
  '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',
  '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',
  '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721',
  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2',
  '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722',
  '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',
  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd',
  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722',
  '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',
  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',
  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd',
  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722',
  '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',
  '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721',
  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5',
  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722',
  '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',
  '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',
  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35',
  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722',
  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721',
  '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd',
  '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35',
  '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722',
  '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721',
  '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5',
  '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35',
  '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721',
  '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd',
  '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35',
  '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'
];

function isInteger(string) {
  let integer = parseInt(string);
  if (isNaN(integer)) {
    return false;
  }
  return true;
}

// 返回农历 Y 年的闰月, 若没有闰月则返回零
function getLeapMonth(Y) { // 闰字编码 \u95f0
  return (LunarLeapInfo[Y - MIN_YEAR] & 0xf);
}

// 返回农历 Y 年闰月天数, 若该年没有闰月则返回零
function getDaysOfLeapMonth(Y) {
  if (getLeapMonth(Y)) {
    return ((LunarLeapInfo[Y - MIN_YEAR] & 0x10000) ? 30 : 29);
  }
  return 0;
}

// 返回农历 Y 年的总天数
function getDaysOfYear(Y) {
  let i, sum = 348;
  for (i = 0x8000; i > 0x8; i >>= 1) {
    sum += (LunarLeapInfo[Y - MIN_YEAR] & i) ? 1 : 0;
  }
  return (sum + getDaysOfLeapMonth(Y));
}

// 返回农历 Y 年 M 月(非闰月)总天数
function getDaysOfMonth(Y, M) {
  if (M > 12 || M < 1) {
    return -1; // 月份从 01 至 12，参数错误返回 -1
  }
  return ((LunarLeapInfo[Y - MIN_YEAR] & (0x10000 >> M)) ? 30 : 29);
}

// 农历 Y 年转换为干支纪年
function getGanZhiYear(Y) {
  let gan = (Y - 3) % 10;
  let zhi = (Y - 3) % 12;  // 天干/地支的索引从 0 开始
  if (gan === 0) gan = 10; // 余数为 0 则为最后一个天干
  if (zhi === 0) zhi = 12; // 余数为 0 则为最后一个地支
  return { gan: Gan[gan - 1], zhi: Zhi[zhi - 1], ani: Animals[zhi -1]};
}

// 相对<甲子>偏移量
function toGanZhi(offset) {
  const gan = offset % 10;
  const zhi = offset % 12;
  return { gan: Gan[gan], zhi: Zhi[zhi]};
}

// 获取公历 Y 年的第 N个节气的公历日期
//
// 小寒/01  大寒/02  立春/03  雨水/04  惊蛰/05  春分/06  清明/07  谷雨/08
// 立夏/09  小满/10  芒种/11  夏至/12  小暑/13  大暑/14  立秋/15  处暑/16
// 白露/17  秋分/18  寒露/19  霜降/20  立冬/21  小雪/22  大雪/23  冬至/24
function getSolarMonthDayAtJieQi(Y, N) {
  if (Y < MIN_YEAR || Y > MAX_YEAR || N < 1 || N > 24) {
    return -1;
  }

  const xcalday = []
  const xtable = SolarJieQi[Y - MIN_YEAR];

  for (let index = 0; index < xtable.length; index += 5) {
    const chunk = parseInt('0x' + xtable.substr(index, 5)).toString()
    xcalday.push(chunk[0], chunk.substr(1, 2), chunk[3], chunk.substr(4, 2))
  }
  return parseInt(xcalday[N - 1]);
}

// Y 是否是闰年 => 0 平年, 1 闰年
function isSolarLeapYear(year) {
  if(year % 400 == 0 )
    return 1;
  else if(year % 100 == 0)
    return 0;
  else if(year % 4 == 0)
    return 1;
  else
    return 0;
}

// 返回公历 Y 年 M 月的天数 -1, 28, 29, 30, 31
function getSolarDaysOfMonth(Y, M) {
  if (M > 12 || M < 1) {
    return -1
  }
  const ms = M - 1;
  if (ms === 1) { // 检测二月份闰平后返回 28 或 29
    return isSolarLeapYear(Y) ? 29 : 28;
  } else {
    // 公历每个月份的天数(常规)
    const SolarDaysPerMonthNormal = [
      31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    ];
    return SolarDaysPerMonthNormal[ms];
  }
}

function getGanZhiShiJian(hh, mm) {
  switch (hour) {
    case 23: return  0; break;
    case 00: return  0; break; // 子
    case 01: return  1; break;
    case 02: return  1; break; // 丑
    case 03: return  2; break;
    case 04: return  2; break; // 寅
    case 05: return  3; break;
    case 06: return  3; break; // 卯
    case 07: return  4; break;
    case 08: return  4; break; // 辰
    case 09: return  5; break;
    case 10: return  5; break; // 巳
    case 11: return  6; break;
    case 12: return  6; break; // 午
    case 13: return  7; break;
    case 14: return  7; break; // 未
    case 15: return  8; break;
    case 16: return  8; break; // 申
    case 17: return  9; break;
    case 18: return  9; break; // 酉
    case 15: return 10; break;
    case 20: return 10; break; // 戌
    case 21: return 11; break;
    case 22: return 11; break; // 亥
  }
}

// 阳历 => 农历 https://www.beijing-time.org
function convSolarToLunar(sYY, sMM, sDD) {
  let y = parseInt(sYY); // 公历年
  let m = parseInt(sMM); // 公历月
  let d = parseInt(sDD); // 公历日

  if (y < MIN_YEAR || y > MAX_YEAR) { // 公历年上限
    return -1;
  }
  if (y === MIN_YEAR && m === 1 && d < 31) { // 公历年下限
    return -1;
  }

  let xdate, i, xtmp = 0;
  if (!y) { // 空传参获得前日期
    xdate = new Date();
  } else {
    xdate = new Date(y, parseInt(m) - 1, d);
  }

  // 标准化格式转换
  y = xdate.getFullYear();
  m = xdate.getMonth() + 1;
  d = xdate.getDate();

  let offset = Date.UTC(xdate.getFullYear(), xdate.getMonth(), xdate.getDate());
  offset = (offset - Date.UTC(MIN_YEAR, 0, 31)) / 86400000;

  for (i = MIN_YEAR; i < 2101 && offset > 0; i++) {
    xtmp = getDaysOfYear(i);
    offset -= xtmp;
  }
  if (offset < 0) {
    offset += xtmp;
    i--;
  }

  let today = new Date(), istoday = false; // 是否今天
  if (today.getFullYear() === y && today.getMonth() + 1 === m && today.getDate() === d) {
    istoday = true;
  }

  let week = xdate.getDay(); // 星期日=0, 星期六=6
  if (week === 0) { week = 7; }

  const year = i; // 农历年
  let leapMonth = getLeapMonth(i); // 闰哪个月
  let isleap = false;

  for (i = 1; i < 13 && offset > 0; i++) { // 效验闰月
    if (leapMonth > 0 && i === (leapMonth + 1) && isleap === false) { // 闰月
      --i;
      isleap = true;
      xtmp = getDaysOfLeapMonth(year); // 计算农历闰月天数
    } else {
      xtmp = getDaysOfMonth(year, i); // 计算农历普通月天数
    }

    if (isleap === true && i === (leapMonth + 1)) { // 解除闰月
      isleap = false;
    }
    offset -= xtmp;
  }

  // 闰月导致数组下标重叠取反
  if (offset === 0 && leapMonth > 0 && i === leapMonth + 1) {
    if (isleap) {
      isleap = false;
    } else {
      isleap = true;
      --i;
    }
  }
  if (offset < 0) {
    offset += xtmp;
    --i;
  }

  const month = i;        // 农历月
  const day = offset + 1; // 农历日

  // 天干地支处理
  const sm = m - 1;

  // 返回当月的两个节气开始日期
  const jday = getSolarMonthDayAtJieQi(y, (m * 2 - 1)); // 月初为节
  const qday = getSolarMonthDayAtJieQi(y, (m * 2));     // 月中为气

  // 依据12节气修正干支月
  let gzM = toGanZhi((y - MIN_YEAR) * 12 + m + 11);
  if (d >= jday) {
    gzM = toGanZhi((y - MIN_YEAR) * 12 + m + 12);
  }

  // 传入日期的节气
  let jieqi = '';
  if (jday === d) { jieqi = JieQi[m * 2 - 2]; }
  if (qday === d) { jieqi = JieQi[m * 2 - 1]; }

  // 日柱: 当月首日与 1900/1/1 相差天数
  const dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10;
  const gzD = toGanZhi(dayCyclical + d - 1);

  const solarDate = y + '-' + m + '-' + d;
  const lunarDate = year + '-' + month + '-' + day;

  return {
    is: { today: istoday, leap: isleap },
    lunar: { y: year, m: month, d: day}, // 农历
    solar: { y, m, d, week, jq: jieqi }, // 阳历
    gz: { y: getGanZhiYear(year), m: gzM, d: gzD, },
    iso8601: { solar: solarDate, lunar: lunarDate },
  };
}

// Solar, Lunar
// console.log(getSolarMonthDayAtJieQi(2024,10))
// process.exit(0)

const now=new Date();
const YY=now.getFullYear();
const MM=now.getMonth() + 1;
const DD=now.getDate();

console.log(YY + "-" + MM + "-" + DD)

const lunar = convSolarToLunar()
console.log(lunar)
