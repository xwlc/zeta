#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-only OR Apache-2.0 OR MIT
# SPDX-FileCopyrightText: 2024 Charles Wong <charlie-wong@outlook.com>
# Created By: Charles Wong 2024-06-15T06:32:03+08:00 Asia/Shanghai
# Repository: https://github.com/xwlc/zeta

[[ -z "${XCOLORS}" || ! -f "${XCOLORS}" ]] && exit 255
source "${XCOLORS}" # 加载终端彩色消息输出显示的函数库

function has-cmd() {  command -v "$1" > /dev/null; }
function no-cmd() { ! command -v "$1" > /dev/null; }

THIS_FNAME="$(basename "$0")" # 当前文件名
THIS_DIR="$(realpath "${0%/*}")" # 当前目录
[[ "$0" == "${THIS_FNAME}" ]] && THIS_DIR="${PWD}"

# -R,--repo;
# --public; --private; -p,--template; -d,--description

# 登陆状态 $ gh auth status
# 仓库列表 $ gh repo list [用户名/组织名]
# 发布信息 $ gh release list -R 用户名/仓库名
# 搜索仓库 $ gh search repos --owner 用户名 --match name 仓库名
#
# 新建仓库 $ gh repo create 仓库名 -p 模板库 -d 描述

function is-inside-git-work-tree() {
  git rev-parse --is-inside-work-tree &> /dev/null
}

# $1 原始字符串  $2 期望包含字符
function has-sub-string() {
  # 删除期望字符后若二者不相等则表示包含
  [[ "$(echo "$1" | sed "s#$2##")" != "$1" ]]
}

# NOTE `gh` respect GITHUB_TOKEN
if no-cmd gh || no-cmd git; then # https://github.com/cli
  echo "${LINENO}: Not found command $(@R3 gh) or $(@R3 git)"; exit 1
fi # https://cli.github.com/manual

if is-inside-git-work-tree; then
  CURRENT_REPO=$(git remote --verbose | head -1 | cut -d' ' -f1 | cut -f2)
  if has-sub-string "${CURRENT_REPO}" "git@github.com:"; then
    CURRENT_REPO=$(
      echo "${CURRENT_REPO}" | sed 's#git@github.com:#https://github.com/#'
    )
  fi
  CURRENT_REPO="${CURRENT_REPO%.git}" # 删除结尾的 .git 字符串
  if has-sub-string "${CURRENT_REPO}" "https://github.com/"; then
    GitHubUserName="${CURRENT_REPO#https://github.com/}" # 开头删除
    CurrentRepoName="${GitHubUserName#*/}" # 当前仓库名
    GitHubUserName="${GitHubUserName%/*}"  # 当前用户名
  fi
fi

function print-usage-and-exit() {
  function xmsg() {
    if [[ "$3" == "OldName:NewName" ]]; then
      printf "  $($1 "%-15s") $(@Y3 OldName):$(@G9 NewName)  $4\n" "$2"
    else
      printf "  $($1 "%-15s") $($3 '%-16s') $5\n"  "$2"  "$4"
    fi
  }
  local x1="${GitHubUserName}" x2="${TemplateRepoName}"
  echo
  echo "GitHub UserName [$(@Y9 ${x1})]"
  echo "GitHub 模板仓库 $(@D9 [https://github.com/$(@Y9 ${x1})/$(@G9 ${x2})])"
  echo "CurrentWorkTree $(@D9 [${CURRENT_REPO}])"
  echo
  echo "$(@D9 xcmd) $(@G3 ${THIS_FNAME}) $(@R3 'create')";
  xmsg @G3 '-U, --user'       @D9 GitHubUser   "默认值   [$(@Y9 ${x1})]"
  xmsg @G3 '-T, --templete'   @D9 TemplateRepo "默认值   [$(@Y9 ${x1})/$(@G9 ${x2})]"
  xmsg @B3 '-R, --repo'       @Y3 RepoName     "模板创建 [$(@Y9 ${x1}/)$(@Y3 RepoName)]"
  xmsg @C3 '-b, --branch'     @Y3 BraName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-r, --release'    @Y3 RelName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-t, --tag'        @Y3 TagName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  echo
  echo "$(@D9 xcmd) $(@G3 ${THIS_FNAME}) $(@R3 'rename')";
  xmsg @G3 '-U, --user'       @D9 GitHubUser   "默认值   [$(@Y9 ${x1})]"
  xmsg @G3 '-T, --templete'   @D9 TemplateRepo "默认值   [$(@Y9 ${x1})/$(@G9 ${x2})]"
  xmsg @B3 '-R, --repo'       OldName:NewName  "重命名   [$(@Y9 ${x1}/)$(@Y3 OldName) => $(@Y9 ${x1}/)$(@G9 NewName)]"
  xmsg @C3 '-b, --branch'     OldName:NewName  "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-r, --release'    OldName:NewName  "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-t, --tag'        OldName:NewName  "默认仓库 $(@D9 [${CURRENT_REPO}])"
  echo
  echo "$(@D9 xcmd) $(@G3 ${THIS_FNAME}) $(@R3 'delete')";
  xmsg @G3 '-U, --user'       @D9 GitHubUser   "默认值   [$(@Y9 ${x1})]"
  xmsg @G3 '-T, --templete'   @D9 TemplateRepo "默认值   [$(@Y9 ${x1})/$(@G9 ${x2})]"
  xmsg @B3 '-R, --repo'       @Y3 RepoName     "删除仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-b, --branch'     @Y3 BraName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-r, --release'    @Y3 RelName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  xmsg @C3 '-t, --tag'        @Y3 TagName      "默认仓库 $(@D9 [${CURRENT_REPO}])"
  echo
  unset -f xmsg; exit 1
}

declare CREATE=0  DELETE=0  RENAME=0
case $1 in
  create) CREATE=1 ;;
  rename) RENAME=1 ;;
  delete) DELETE=1 ;;
  *)
    echo "${LINENO}: First argument must be one of:"
    echo "  $(@R3 create), $(@G3 rename) or $(@B3 delete)"
    print-usage-and-exit
  ;;
esac

shift # 删除 $1 参数
declare oRepoName="${CurrentRepoName}"  oBranchName  oReleaseName  oTagName # old
declare nRepoName="${CurrentRepoName}"  nBranchName  nReleaseName  nTagName # new/now

declare OPTIND=1  OPTERR=0  OPTARG='' _xopt_
while getopts ":U:T:R:b:r:t:" _xopt_; do
  case "${_xopt_}" in
    U)   GitHubUserName=${OPTARG} ;;
    T) TemplateRepoName=${OPTARG} ;;
    R)
      nRepoName=${OPTARG}
      if (( RENAME )); then
        oRepoName=$(echo ${OPTARG} | cut -d' ' -f1)
        nRepoName=$(echo ${OPTARG} | cut -d' ' -f2)
      fi
    ;;
    b)
      nBranchName=${OPTARG}
      if (( RENAME )); then
        oBranchName=$(echo ${OPTARG} | cut -d' ' -f1)
        nBranchName=$(echo ${OPTARG} | cut -d' ' -f2)
      fi
    ;;
    r)
      nReleaseName=${OPTARG}
      if (( RENAME )); then
        oReleaseName=$(echo ${OPTARG} | cut -d' ' -f1)
        nReleaseName=$(echo ${OPTARG} | cut -d' ' -f2)
      fi
    ;;
    t)
      nTagName=${OPTARG}
      if (( RENAME )); then
        oTagName=$(echo ${OPTARG} | cut -d' ' -f1)
        nTagName=$(echo ${OPTARG} | cut -d' ' -f2)
      fi
    ;;
  esac
done

TemplateRepoOwner="${GitHubUserName}"
[[ -z "${GitHubUserName}" || -z "${nRepoName}" ]] && {
  echo "${LINENO}: no $(@R3 GitHubUserName) or $(@R3 WorkRepoName)"
  print-usage-and-exit
}

# https://docs.github.com/articles/creating-a-template-repository
# https://docs.github.com/articles/creating-a-repository-from-a-template
if [[ -z "${TemplateRepoName}" ]]; then
  # 模板仓库 https://github.com/xwlc/mini-repo
  TemplateRepoOwner="xwlc"; TemplateRepoName="mini-repo"
fi

WORK_REPO="https://github.com/${GitHubUserName}/${nRepoName}"
TEMPLATE_REPO="https://github.com/${TemplateRepoOwner}/${TemplateRepoName}"

function has-repo() {
  local usrN="$1"  repoN="$2"  out # $1 表示仓库名称(完全精准匹配)
  out="$(gh search repos --owner "${usrN}" --match name "${repoN}" 2>&1)"
  [[ $? -eq 0 && -n "${out}" ]] # 不等于 <空> 则表示目标仓库存在
}

function has-branch() { echo TODO; }
function has-release() { echo TODO; }
function has-tag() { echo TODO; }

CREATE_NEW_REPO=0
(( CREATE )) && {
  if [[ -z "${nBranchName}" && -z "${nReleaseName}" && -z "${nTagName}" ]]; then
    CREATE_NEW_REPO=1 # 依据 <模板仓库> 创建 <新仓库>
  fi
}

if (( CREATE_NEW_REPO )); then
  [[ -z "${TemplateRepoName}" ]] || ! has-repo "${TemplateRepoOwner}" "${TemplateRepoName}" && {
    echo "${LINENO}: No template repo $(@R3 ${TEMPLATE_REPO})"
    echo; print-usage-and-exit
  }
  has-repo "${GitHubUserName}" "${nRepoName}" && {
    echo "${LINENO}: Already exist repo $(@R3 ${WORK_REPO})"
    echo; print-usage-and-exit
  }
else
  ! has-repo "${GitHubUserName}" "${nRepoName}" && {
    echo "${LINENO}: No work repo $(@R3 ${WORK_REPO})"
    echo; print-usage-and-exit
  }
fi

if true; then # nRepoName  nBranchName  nReleaseName  nTagName
  echo "模板 $(@Y3 ${TemplateRepoOwner}/${TemplateRepoName})"
  (( CREATE )) && {
    echo "Create 仓库 $(@R3 ${GitHubUserName}/${nRepoName})"
    echo "Create 分支 [${nBranchName}]"
    echo "Create 发布 [${nReleaseName}]"
    echo "Create 标签 [${nTagName}]"
  }
  (( DELETE )) && {
    echo "Delete 仓库 $(@R3 ${GitHubUserName}/${nRepoName})"
    echo "Delete 分支 [${nBranchName}]"
    echo "Delete 发布 [${nReleaseName}]"
    echo "Delete 标签 [${nTagName}]"
  }
  (( RENAME )) && {
    echo "ReName 仓库 $(@D9 ${GitHubUserName}/${oRepoName}) => $(@R3 ${GitHubUserName}/${nRepoName})"
    echo "ReName 分支 [${oBranchName}]  => [${nBranchName}]"
    echo "ReName 发布 [${oReleaseName}] => [${nReleaseName}]"
    echo "ReName 标签 [${oTagName}]     => [${nTagName}]"
  }
  exit
fi

echo ---ok---
