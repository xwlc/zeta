#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-only OR Apache-2.0 OR MIT
# SPDX-FileCopyrightText: 2024 Charles Wong <charlie-wong@outlook.com>
# Created By: Charles Wong 2024-05-26T00:01:02+08:00 Asia/Shanghai
# Repository: https://github.com/xwlc/zeta

THIS_FNAME="$(basename "$0")"
THIS_DIR="$(realpath "${0%/*}")"

ZETA_DIR="$(realpath "${THIS_DIR}/../..")"

if [[ -n "${XCOLORS}" && -f "${XCOLORS}" ]]; then
  source "${XCOLORS}"
else
  exit 255
fi

function has-cmd() {  command -v "$1" > /dev/null; }
function no-cmd() { ! command -v "$1" > /dev/null; }

function usage() {
  echo "$(@Y3 ${THIS_FNAME}) $(@G3 list) show all of the customized configuration"
  echo "$(@Y3 ${THIS_FNAME}) $(@G3 show) $(@D9 '[comp]') component config status of [comp]"
  echo "$(@Y3 ${THIS_FNAME}) $(@G3 sync) $(@D9 '<comp>' $(@R3 '[fake]')) use zeta customized [comp]"
}

declare -a COMPS=(
  "app/dophine"
  "app/konsole"
  "app/git"
  "app/nvim"
  "app/vscode"
  "app/ov.yaml"

  "#XDG#"

  "xdg/desktop"
  "xdg/fonts"
  "xdg/icons"
  "xdg/dolphin.hidden"

  "#SYS#"

  "sys/apt"
  "sys/fstab"
  "sys/grub"
  "sys/hosts"
  "sys/fcitx5-punc.ini"
  "sys/journald.conf"
  "sys/sysctl.conf"
  "sys/updatedb.conf"
)

function has-comps() {
  [[ $# -eq 0 || -z "$1" ]] && return 1
  for it in ${COMPS[@]}; do
    [[ "${it}" == "#XDG#" || "${it}" == "#SYS#" ]] && continue
    [[ "$1" == "${it}" ]] && return
  done
  return 1
}

function list-comps() {
  local CompColor=@G3
  for it in ${COMPS[@]}; do
    if [[ "${it}" == "#XDG#" ]]; then
      echo; CompColor=@Y3; continue
    elif [[ "${it}" == "#SYS#" ]]; then
      echo; CompColor=@R3; continue
    fi
    echo "Comp $(@D9 ${ZETA_DIR}/etc/)$(${CompColor} ${it})"
  done
}

function tree-like-msg() {
  local spaces='  '    symbol='├─' what=diff
  [[ $1 == 'end' ]] && symbol="└─"

  case $2 in
    config) symbol="${spaces}${symbol} Config/"; what="sync" ;;
    status) symbol="${spaces}${symbol} Status/"; ;;
  esac


  local LEN=$3  orgSRC="$4" dstSYS="$5"  hashORG="$6" hashDST="$7"

  if [[ -z "${hashDST}" ]]; then
    printf "${symbol}$(@R3 ${what}) $(@Y3 "%-${LEN}s") -> $(@D9 ${dstSYS})\n" "${orgSRC}"
  elif [[ "${hashORG}" != "${hashDST}" ]]; then
    printf "${symbol}$(@R3 diff) $(@Y3 "%-${LEN}s") -> $(@C3 ${dstSYS})\n" "${orgSRC}"
  else
    printf "${symbol}$(@G3 sync) $(@Y3 "%-${LEN}s") -> $(@C3 ${dstSYS})\n" "${orgSRC}"
  fi
}

function comp-sys/apt() {
  if no-cmd apt; then
    echo "No $(@G3 apt) command found, skip"
    return 1
  fi

  local org_dir
  org_dir="$(lsb_release -sr)-$(lsb_release -sc)"

  if [[ -d "${ZETA_DIR}/etc/sys/apt/${org_dir}" ]]; then
    org_dir="sys/apt/${org_dir}"
  else
    echo "No $(@G3 apt) config for $(@R3 ${org_dir}), skip"
    return 1
  fi

  local it count maxcnt hashZ hashS orgSRC dstSYS
  if [[ $1 == status ]]; then
    echo "$(@D9 ${ZETA_DIR}/etc/)$(@R3 sys/apt)"

    maxcnt=$(ls "${ZETA_DIR}/etc/${org_dir}" | wc -l); count=0
    for it in $(ls "${ZETA_DIR}/etc/${org_dir}"); do
      orgSRC="${org_dir}/${it}"
      dstSYS="$(cat "${ZETA_DIR}/etc/${orgSRC}" | head -1 | cut -d' ' -f2)"
      hashS=""; hashZ=$(md5sum "${ZETA_DIR}/etc/${orgSRC}" | cut -d' ' -f1)
      if [[ -f "${dstSYS}" ]]; then
        hashS=$(md5sum "${dstSYS}" | cut -d' ' -f1)
      fi

      if (( count++, count == maxcnt )); then
        tree-like-msg end status 40 "${orgSRC}" "${dstSYS}" "${hashZ}" "${hashS}"
      else
        tree-like-msg xxx status 40 "${orgSRC}" "${dstSYS}" "${hashZ}" "${hashS}"
      fi
    done
    echo
    org_dir="sys/apt/gpg-keyrings"
    maxcnt=$(ls "${ZETA_DIR}/etc/${org_dir}" | wc -l); count=0
    for it in $(ls "${ZETA_DIR}/etc/${org_dir}"); do
      orgSRC="${org_dir}/${it}"
      dstSYS="/etc/apt/keyrings/${it}"
      hashS=""; hashZ=$(md5sum "${ZETA_DIR}/etc/${orgSRC}" | cut -d' ' -f1)
      if [[ -f "${dstSYS}" ]]; then
        hashS=$(md5sum "${dstSYS}" | cut -d' ' -f1)
      fi

      if (( count++, count == maxcnt )); then
        tree-like-msg end status 40 "${orgSRC}" "${dstSYS}" "${hashZ}" "${hashS}"
      else
        tree-like-msg xxx status 40 "${orgSRC}" "${dstSYS}" "${hashZ}" "${hashS}"
      fi
    done
  else
    echo "Sync $(@D9 ${ZETA_DIR}/etc/)$(@R3 sys/apt)"
    echo "├─ "
  fi
}

function comp-status() {
  if [[ "$1" == "app" ]]; then
    echo "status app/*"
    return
  elif [[ "$1" == "sys" ]]; then
    comp-sys/apt status
    return
  elif [[ "$1" == "xdg" ]]; then
    echo "status xdg/*"
    return
  fi

  echo "show-all-comp-status"
}

function show-comp-status() {
  if [[ $# -eq 0 || -z "$1" ]]; then
    comp-status all; return
  fi

  case "$1" in
    app|app/*) comp-status app; return; ;;
    xdg|xdg/*) comp-status xdg; return; ;;
    sys|sys/*) comp-status sys; return; ;;
  esac

  if has-comps "$1"; then
    comp-$1 status
  else
    echo "No configuration for component $(@R3 "[$1]")"
    return 1
  fi
}

function sync-comp-to-system() {
  true
}

case $1 in
  list) list-comps ;;
  show) show-comp-status "$2" ;;
  sync) sync-comp-to-system "$2" "$3" ;;
  *) usage; exit 0 ;;
esac
